package src.view;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Iterator;

public class GamePage extends JPanel implements ActionListener, KeyListener {
    private Image background;
    private JLabel l1;
    private Timer gameTimer;
    private int playerX = 160;
    private int playerY = 475;
    private int playerWidth = 30;
    private int playerHeight = 60;
    private int speed = 7;

    private boolean upPressed = false;
    private boolean downPressed = false;
    private boolean leftPressed = false;
    private boolean rightPressed = false;

    public static class Bullet {
        public int x, y;
        public final int width = 5;
        public final int height = 10;
        public int dy;

        public Bullet(int x, int y, int dy) {
            this.x = x;
            this.y = y;
            this.dy = dy;
        }

        public Rectangle getBounds() {
            return new Rectangle(x, y, width, height);
        }
    }

    public static class Enemy {
        public int x, y;
        public final int width = 40;
        public final int height = 40;
        private int dx = 2;

        public Enemy(int x, int y) {
            this.x = x;
            this.y = y;
        }

        public void move(int panelWidth) {
            x += dx;
            if (x < 0 || x > panelWidth - width) {
                dx = -dx;
                y += 20;
            }
        }

        public Rectangle getBounds() {
            return new Rectangle(x, y, width, height);
        }
    }


    private ArrayList<Bullet> bullets = new ArrayList<>();
    private ArrayList<Enemy> enemies = new ArrayList<>();
    private ArrayList<Bullet> enemyBullets = new ArrayList<>();



    public GamePage(int fr_width, int fr_height){
        setLayout(null);
        background = new ImageIcon("assets/images/nebula_breaker_bg_img.png").getImage();
        setPreferredSize(new Dimension(fr_width, fr_height));
        setFocusable(true);
        addKeyListener(this);
        SwingUtilities.invokeLater(this::requestFocusInWindow);

        l1=new JLabel("Game Page");
        l1.setForeground(Color.BLACK);
        l1.setBounds(150,40,100,30);
        add(l1);

        for (int i = 0; i < 10; i++) {
            enemies.add(new Enemy(50 + i * 100, 50));
        }

        gameTimer = new Timer(16, this);
        gameTimer.start();
    }

        @Override
        public void actionPerformed(ActionEvent e) {
            if (upPressed && playerY >= 300) {
                playerY -= speed;
            }
            if (downPressed && playerY < 500) {
                playerY += speed;
            }
            if (leftPressed && playerX > 0) {
                playerX -= speed;
            }
            if (rightPressed && playerX < 300) {
                playerX += speed;
            }

            // Move bullets
        Iterator<Bullet> bulletIter = bullets.iterator();
        while (bulletIter.hasNext()) {
            Bullet b = bulletIter.next();
            b.y -= 8;
            if (b.y < 0) bulletIter.remove(); // Remove bullet if off screen
        }

        // Move enemies (simple left-right movement)
        for (Enemy enemy : enemies) {
            enemy.move(getWidth());
        }


          // Enemies shooting randomly
    for (Enemy enemy : enemies) {
        if (Math.random() < 0.01) {  // 1% chance each tick to shoot
            enemyBullets.add(new Bullet(enemy.x + enemy.width/2 - 2, enemy.y + enemy.height, 5)); // shoot downward
        }
    }

    // Move enemy bullets down
    Iterator<Bullet> enemyBulletIter = enemyBullets.iterator();
    while (enemyBulletIter.hasNext()) {
        Bullet eb = enemyBulletIter.next();
        eb.y += eb.dy;
        if (eb.y > getHeight()) {
            enemyBulletIter.remove();
        }
    }

    // Check collision between enemy bullets and player
    Rectangle playerRect = new Rectangle(playerX, playerY, playerWidth, playerHeight);
    enemyBulletIter = enemyBullets.iterator();
    while (enemyBulletIter.hasNext()) {
        Bullet eb = enemyBulletIter.next();
        if (eb.getBounds().intersects(playerRect)) {
            enemyBulletIter.remove();
            // TODO: handle player getting hit (e.g., reduce health, end game)
            System.out.println("Player hit!");
        }
    }
        // Check bullet-enemy collisions
        Iterator<Bullet> bIter = bullets.iterator();
        while (bIter.hasNext()) {
            Bullet b = bIter.next();
            Iterator<Enemy> eIter = enemies.iterator();
            while (eIter.hasNext()) {
                Enemy enemy = eIter.next();
                Rectangle bulletRect = new Rectangle(b.x, b.y, b.width, b.height);
                Rectangle enemyRect = new Rectangle(enemy.x, enemy.y, enemy.width, enemy.height);
                if (bulletRect.intersects(enemyRect)) {
                    bIter.remove();
                    eIter.remove();
                    break; // bullet removed, go to next bullet
                }
            }
        }

        
            repaint();
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.drawImage(background, 0, 0, getWidth(), getHeight(), this);

            // drawing player
            g.setColor(Color.WHITE);
            g.fillRect(playerX, playerY, playerWidth, playerHeight);

            // drawing bullet
            g.setColor(Color.YELLOW);
            for (Bullet b : bullets) {
            g.fillRect(b.x, b.y, b.width, b.height);
            }

            // drawing enemies
            g.setColor(Color.RED);
            for (Enemy e : enemies) {
            g.fillRect(e.x, e.y, e.width, e.height);
            }

            // drawing enemy bullets 
            g.setColor(Color.CYAN);
            for (Bullet eb : enemyBullets) {
            g.fillRect(eb.x, eb.y, eb.width, eb.height);
            }



        }


        @Override
        public void keyPressed(KeyEvent e) {
            int key = e.getKeyCode();

            if (key == KeyEvent.VK_W) {
                 upPressed = true;
            }
            if (key == KeyEvent.VK_S) {
                downPressed = true;
            }
            if (key == KeyEvent.VK_A) {
                leftPressed = true;
            }
            if (key == KeyEvent.VK_D) {
                rightPressed = true;
            }
            if (key == KeyEvent.VK_SPACE) {
                bullets.add(new Bullet(playerX + playerWidth / 2 - 2, playerY, -8));
            }
            
            
        }

        @Override
        public void keyTyped(KeyEvent e){

        }

        @Override
        public void keyReleased(KeyEvent e) {
            int key = e.getKeyCode();

            if (key == KeyEvent.VK_W) {
                 upPressed = false;
            }
            if (key == KeyEvent.VK_S) {
                downPressed = false;
            }
            if (key == KeyEvent.VK_A) {
                leftPressed = false;
            }
            if (key == KeyEvent.VK_D) {
                rightPressed = false;
            }

        }

}

